// Code generated by ObjectBox; DO NOT EDIT.

package obx

import (
	"github.com/edgexfoundry/edgex-go/pkg/models"
	. "github.com/edgexfoundry/edgex-go/pkg/models"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type transmission_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TransmissionBinding = transmission_EntityInfo{
	Id:  17,
	Uid: 568708924645106899,
}

// Transmission_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Transmission_ = struct {
	Created               *objectbox.PropertyInt64
	Modified              *objectbox.PropertyInt64
	Origin                *objectbox.PropertyInt64
	ID                    *objectbox.PropertyUint64
	Notification          *objectbox.PropertyUint64
	Receiver              *objectbox.PropertyString
	Channel_Type          *objectbox.PropertyString
	Channel_MailAddresses *objectbox.PropertyStringVector
	Channel_Url           *objectbox.PropertyString
	Status                *objectbox.PropertyString
	ResendCount           *objectbox.PropertyInt
}{
	Created: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	Modified: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	Origin: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	ID: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 4,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	Notification: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 5,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	Receiver: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 6,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	Channel_Type: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 7,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	Channel_MailAddresses: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id: 8,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	Channel_Url: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 9,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	Status: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 10,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
	ResendCount: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id: 11,
			Entity: &objectbox.Entity{
				Id: 17,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (transmission_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (transmission_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Transmission", 17, 568708924645106899)
	model.Property("Created", objectbox.PropertyType_Long, 1, 6194874499848524317)
	model.Property("Modified", objectbox.PropertyType_Long, 2, 8335706959230617972)
	model.Property("Origin", objectbox.PropertyType_Long, 3, 340660038000809638)
	model.Property("ID", objectbox.PropertyType_Long, 4, 328558019935061479)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Notification", objectbox.PropertyType_Relation, 5, 8656392927755662017)
	model.PropertyRelation("Notification", 21, 267873316193914610)
	model.Property("Receiver", objectbox.PropertyType_String, 6, 4403412569370574351)
	model.Property("Channel_Type", objectbox.PropertyType_String, 7, 6785982123671667194)
	model.Property("Channel_MailAddresses", objectbox.PropertyType_StringVector, 8, 1268731185823466266)
	model.Property("Channel_Url", objectbox.PropertyType_String, 9, 8618321585324687443)
	model.Property("Status", objectbox.PropertyType_String, 10, 7086397840993736018)
	model.Property("ResendCount", objectbox.PropertyType_Long, 11, 2391999354415967429)
	model.EntityLastPropertyId(11, 2391999354415967429)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (transmission_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*Transmission); ok {
		return objectbox.StringIdConvertToDatabaseValue(obj.ID), nil
	} else {
		return objectbox.StringIdConvertToDatabaseValue(object.(Transmission).ID), nil
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (transmission_EntityInfo) SetId(object interface{}, id uint64) {
	if obj, ok := object.(*Transmission); ok {
		obj.ID = objectbox.StringIdConvertToEntityProperty(id)
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(Transmission).ID
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (transmission_EntityInfo) PutRelated(txn *objectbox.Transaction, object interface{}, id uint64) error {
	if rel := &object.(*Transmission).Notification; rel != nil {
		rId, err := NotificationBinding.GetId(rel)
		if err != nil {
			return err
		} else if rId == 0 {
			if err := txn.RunWithCursor(NotificationBinding.Id, func(targetCursor *objectbox.Cursor) error {
				_, err := targetCursor.Put(rel) // NOTE Put/PutAsync() has a side-effect of setting the rel.ID
				return err
			}); err != nil {
				return err
			}
		}
	}
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (transmission_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*Transmission)
	var offsetReceiver = fbutils.CreateStringOffset(fbb, obj.Receiver)
	var offsetChannel_Type = fbutils.CreateStringOffset(fbb, string(obj.Channel.Type))
	var offsetChannel_MailAddresses = fbutils.CreateStringVectorOffset(fbb, obj.Channel.MailAddresses)
	var offsetChannel_Url = fbutils.CreateStringOffset(fbb, obj.Channel.Url)
	var offsetStatus = fbutils.CreateStringOffset(fbb, string(obj.Status))

	var rIdNotification uint64
	if rel := &obj.Notification; rel != nil {
		if rId, err := NotificationBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdNotification = rId
		}
	}

	// build the FlatBuffers object
	fbb.StartObject(11)
	fbutils.SetInt64Slot(fbb, 0, obj.BaseObject.Created)
	fbutils.SetInt64Slot(fbb, 1, obj.BaseObject.Modified)
	fbutils.SetInt64Slot(fbb, 2, obj.BaseObject.Origin)
	fbutils.SetUint64Slot(fbb, 3, id)
	fbutils.SetUint64Slot(fbb, 4, rIdNotification)
	fbutils.SetUOffsetTSlot(fbb, 5, offsetReceiver)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetChannel_Type)
	fbutils.SetUOffsetTSlot(fbb, 7, offsetChannel_MailAddresses)
	fbutils.SetUOffsetTSlot(fbb, 8, offsetChannel_Url)
	fbutils.SetUOffsetTSlot(fbb, 9, offsetStatus)
	fbutils.SetInt64Slot(fbb, 10, int64(obj.ResendCount))
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (transmission_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) (interface{}, error) {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(10, 0)

	var relNotification *Notification
	if rId := table.GetUint64Slot(12, 0); rId > 0 {
		if err := txn.RunWithCursor(NotificationBinding.Id, func(targetCursor *objectbox.Cursor) error {
			if relObject, err := targetCursor.Get(rId); err != nil {
				return err
			} else if relObj, ok := relObject.(*Notification); ok {
				relNotification = relObj
			} else {
				var relObj = relObject.(Notification)
				relNotification = &relObj
			}
			return nil
		}); err != nil {
			return nil, err
		}
	} else {
		relNotification = &Notification{}
	}

	return &Transmission{
		BaseObject: models.BaseObject{
			Created:  table.GetInt64Slot(4, 0),
			Modified: table.GetInt64Slot(6, 0),
			Origin:   table.GetInt64Slot(8, 0),
		},
		ID:           objectbox.StringIdConvertToEntityProperty(id),
		Notification: *relNotification,
		Receiver:     fbutils.GetStringSlot(table, 14),
		Channel: models.Channel{
			Type:          models.ChannelType(fbutils.GetStringSlot(table, 16)),
			MailAddresses: fbutils.GetStringVectorSlot(table, 18),
			Url:           fbutils.GetStringSlot(table, 20),
		},
		Status:      models.TransmissionStatus(fbutils.GetStringSlot(table, 22)),
		ResendCount: int(table.GetUint64Slot(24, 0)),
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (transmission_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]Transmission, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (transmission_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]Transmission), *object.(*Transmission))
}

// Box provides CRUD access to Transmission objects
type TransmissionBox struct {
	*objectbox.Box
}

// BoxForTransmission opens a box of Transmission objects
func BoxForTransmission(ob *objectbox.ObjectBox) *TransmissionBox {
	return &TransmissionBox{
		Box: ob.InternalBox(17),
	}
}

// Put synchronously inserts/updates a single object.
// In case the ID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Transmission.ID property on the passed object will be assigned the new ID as well.
func (box *TransmissionBox) Put(object *Transmission) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the Transmission.ID property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TransmissionBox) PutAsync(object *Transmission) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case IDs are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Transmission.ID property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Transmission.ID assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TransmissionBox) PutAll(objects []Transmission) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TransmissionBox) Get(id uint64) (*Transmission, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Transmission), nil
}

// Get reads all stored objects
func (box *TransmissionBox) GetAll() ([]Transmission, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]Transmission), nil
}

// Remove deletes a single object
func (box *TransmissionBox) Remove(object *Transmission) (err error) {
	return box.Box.Remove(objectbox.StringIdConvertToDatabaseValue(object.ID))
}

// Creates a query with the given conditions. Use the fields of the Transmission_ struct to create conditions.
// Keep the *TransmissionQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TransmissionBox) Query(conditions ...objectbox.Condition) *TransmissionQuery {
	return &TransmissionQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Transmission_ struct to create conditions.
// Keep the *TransmissionQuery if you intend to execute the query multiple times.
func (box *TransmissionBox) QueryOrError(conditions ...objectbox.Condition) (*TransmissionQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TransmissionQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all Transmission which ID is either 42 or 47:
// 		box.Query(Transmission_.ID.In(42, 47)).Find()
type TransmissionQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TransmissionQuery) Find() ([]Transmission, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]Transmission), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TransmissionQuery) Offset(offset uint64) *TransmissionQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TransmissionQuery) Limit(limit uint64) *TransmissionQuery {
	query.Query.Limit(limit)
	return query
}
