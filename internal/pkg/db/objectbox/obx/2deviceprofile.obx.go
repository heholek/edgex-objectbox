// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package obx

import (
	"errors"
	"github.com/edgexfoundry/go-mod-core-contracts/models"
	. "github.com/edgexfoundry/go-mod-core-contracts/models"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type deviceProfile_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var DeviceProfileBinding = deviceProfile_EntityInfo{
	Entity: objectbox.Entity{
		Id: 5,
	},
	Uid: 2211424933411195666,
}

// DeviceProfile_ contains type-based Property helpers to facilitate some common operations such as Queries.
var DeviceProfile_ = struct {
	Timestamps_Created  *objectbox.PropertyInt64
	Timestamps_Modified *objectbox.PropertyInt64
	Timestamps_Origin   *objectbox.PropertyInt64
	Description         *objectbox.PropertyString
	Id                  *objectbox.PropertyUint64
	Name                *objectbox.PropertyString
	Manufacturer        *objectbox.PropertyString
	Model               *objectbox.PropertyString
	Labels              *objectbox.PropertyStringVector
	DeviceResources     *objectbox.PropertyByteVector
	DeviceCommands      *objectbox.PropertyByteVector
	CoreCommands        *objectbox.RelationToMany
}{
	Timestamps_Created: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	Timestamps_Modified: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	Timestamps_Origin: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	Description: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     5,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     6,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	Manufacturer: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	Model: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	Labels: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	DeviceResources: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	DeviceCommands: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     11,
			Entity: &DeviceProfileBinding.Entity,
		},
	},
	CoreCommands: &objectbox.RelationToMany{
		Id:     1,
		Source: &DeviceProfileBinding.Entity,
		Target: &CommandBinding.Entity,
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (deviceProfile_EntityInfo) GeneratorVersion() int {
	return 4
}

// AddToModel is called by ObjectBox during model build
func (deviceProfile_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("DeviceProfile", 5, 2211424933411195666)
	model.Property("Timestamps_Created", 6, 1, 2642282108714980568)
	model.Property("Timestamps_Modified", 6, 2, 2107950979126715489)
	model.Property("Timestamps_Origin", 6, 3, 238686394209975473)
	model.Property("Description", 9, 4, 7373170799262197703)
	model.Property("Id", 6, 5, 2058046092051357134)
	model.PropertyFlags(1)
	model.Property("Name", 9, 6, 3395397931582751949)
	model.PropertyFlags(32)
	model.PropertyIndex(4, 2508596274702817237)
	model.Property("Manufacturer", 9, 7, 7853971810229114061)
	model.Property("Model", 9, 8, 6511893101827755872)
	model.Property("Labels", 30, 9, 3915749655245396678)
	model.Property("DeviceResources", 23, 10, 349654535178347918)
	model.Property("DeviceCommands", 23, 11, 5969260086641149857)
	model.EntityLastPropertyId(11, 5969260086641149857)
	model.Relation(1, 2308887105935734223, CommandBinding.Id, CommandBinding.Uid)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (deviceProfile_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*DeviceProfile); ok {
		return objectbox.StringIdConvertToDatabaseValue(obj.Id)
	} else {
		return objectbox.StringIdConvertToDatabaseValue(object.(DeviceProfile).Id)
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (deviceProfile_EntityInfo) SetId(object interface{}, id uint64) error {
	if obj, ok := object.(*DeviceProfile); ok {
		var err error
		obj.Id, err = objectbox.StringIdConvertToEntityProperty(id)
		return err
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(DeviceProfile).Id
		return nil
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (deviceProfile_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	if err := BoxForDeviceProfile(ob).RelationReplace(DeviceProfile_.CoreCommands, id, object, object.(*DeviceProfile).CoreCommands); err != nil {
		return err
	}

	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (deviceProfile_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	var obj *DeviceProfile
	if objPtr, ok := object.(*DeviceProfile); ok {
		obj = objPtr
	} else {
		objVal := object.(DeviceProfile)
		obj = &objVal
	}

	var propDeviceResources []byte
	{
		var err error
		propDeviceResources, err = deviceResourcesJsonToDatabaseValue(obj.DeviceResources)
		if err != nil {
			return errors.New("converter deviceResourcesJsonToDatabaseValue() failed on DeviceProfile.DeviceResources: " + err.Error())
		}
	}

	var propDeviceCommands []byte
	{
		var err error
		propDeviceCommands, err = profileResourcesJsonToDatabaseValue(obj.DeviceCommands)
		if err != nil {
			return errors.New("converter profileResourcesJsonToDatabaseValue() failed on DeviceProfile.DeviceCommands: " + err.Error())
		}
	}

	var offsetDescription = fbutils.CreateStringOffset(fbb, obj.DescribedObject.Description)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)
	var offsetManufacturer = fbutils.CreateStringOffset(fbb, obj.Manufacturer)
	var offsetModel = fbutils.CreateStringOffset(fbb, obj.Model)
	var offsetLabels = fbutils.CreateStringVectorOffset(fbb, obj.Labels)
	var offsetDeviceResources = fbutils.CreateByteVectorOffset(fbb, propDeviceResources)
	var offsetDeviceCommands = fbutils.CreateByteVectorOffset(fbb, propDeviceCommands)

	// build the FlatBuffers object
	fbb.StartObject(11)
	fbutils.SetInt64Slot(fbb, 0, obj.DescribedObject.Timestamps.Created)
	fbutils.SetInt64Slot(fbb, 1, obj.DescribedObject.Timestamps.Modified)
	fbutils.SetInt64Slot(fbb, 2, obj.DescribedObject.Timestamps.Origin)
	fbutils.SetUOffsetTSlot(fbb, 3, offsetDescription)
	fbutils.SetUint64Slot(fbb, 4, id)
	fbutils.SetUOffsetTSlot(fbb, 5, offsetName)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetManufacturer)
	fbutils.SetUOffsetTSlot(fbb, 7, offsetModel)
	fbutils.SetUOffsetTSlot(fbb, 8, offsetLabels)
	fbutils.SetUOffsetTSlot(fbb, 9, offsetDeviceResources)
	fbutils.SetUOffsetTSlot(fbb, 10, offsetDeviceCommands)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (deviceProfile_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'DeviceProfile' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = fbutils.GetUint64Slot(table, 12)

	propId, err := objectbox.StringIdConvertToEntityProperty(id)
	if err != nil {
		return nil, errors.New("converter objectbox.StringIdConvertToEntityProperty() failed on DeviceProfile.Id: " + err.Error())
	}

	propDeviceResources, err := deviceResourcesJsonToEntityProperty(fbutils.GetByteVectorSlot(table, 22))
	if err != nil {
		return nil, errors.New("converter deviceResourcesJsonToEntityProperty() failed on DeviceProfile.DeviceResources: " + err.Error())
	}

	propDeviceCommands, err := profileResourcesJsonToEntityProperty(fbutils.GetByteVectorSlot(table, 24))
	if err != nil {
		return nil, errors.New("converter profileResourcesJsonToEntityProperty() failed on DeviceProfile.DeviceCommands: " + err.Error())
	}

	var relCoreCommands []Command
	if rIds, err := BoxForDeviceProfile(ob).RelationIds(DeviceProfile_.CoreCommands, id); err != nil {
		return nil, err
	} else if rSlice, err := BoxForCommand(ob).GetManyExisting(rIds...); err != nil {
		return nil, err
	} else {
		relCoreCommands = rSlice
	}

	return &DeviceProfile{
		DescribedObject: models.DescribedObject{
			Timestamps: Timestamps{
				Created:  fbutils.GetInt64Slot(table, 4),
				Modified: fbutils.GetInt64Slot(table, 6),
				Origin:   fbutils.GetInt64Slot(table, 8),
			},
			Description: fbutils.GetStringSlot(table, 10),
		},
		Id:              propId,
		Name:            fbutils.GetStringSlot(table, 14),
		Manufacturer:    fbutils.GetStringSlot(table, 16),
		Model:           fbutils.GetStringSlot(table, 18),
		Labels:          fbutils.GetStringVectorSlot(table, 20),
		DeviceResources: propDeviceResources,
		DeviceCommands:  propDeviceCommands,
		CoreCommands:    relCoreCommands,
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (deviceProfile_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]DeviceProfile, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (deviceProfile_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]DeviceProfile), DeviceProfile{})
	}
	return append(slice.([]DeviceProfile), *object.(*DeviceProfile))
}

// Box provides CRUD access to DeviceProfile objects
type DeviceProfileBox struct {
	*objectbox.Box
}

// BoxForDeviceProfile opens a box of DeviceProfile objects
func BoxForDeviceProfile(ob *objectbox.ObjectBox) *DeviceProfileBox {
	return &DeviceProfileBox{
		Box: ob.InternalBox(5),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the DeviceProfile.Id property on the passed object will be assigned the new ID as well.
func (box *DeviceProfileBox) Put(object *DeviceProfile) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the DeviceProfile.Id property on the passed object will be assigned the new ID as well.
func (box *DeviceProfileBox) Insert(object *DeviceProfile) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *DeviceProfileBox) Update(object *DeviceProfile) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *DeviceProfileBox) PutAsync(object *DeviceProfile) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the DeviceProfile.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the DeviceProfile.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *DeviceProfileBox) PutMany(objects []DeviceProfile) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *DeviceProfileBox) Get(id uint64) (*DeviceProfile, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*DeviceProfile), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is an empty object
func (box *DeviceProfileBox) GetMany(ids ...uint64) ([]DeviceProfile, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]DeviceProfile), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *DeviceProfileBox) GetManyExisting(ids ...uint64) ([]DeviceProfile, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]DeviceProfile), nil
}

// GetAll reads all stored objects
func (box *DeviceProfileBox) GetAll() ([]DeviceProfile, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]DeviceProfile), nil
}

// Remove deletes a single object
func (box *DeviceProfileBox) Remove(object *DeviceProfile) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *DeviceProfileBox) RemoveMany(objects ...*DeviceProfile) (uint64, error) {
	var ids = make([]uint64, len(objects))
	var err error
	for k, object := range objects {
		ids[k], err = objectbox.StringIdConvertToDatabaseValue(object.Id)
		if err != nil {
			return 0, errors.New("converter objectbox.StringIdConvertToDatabaseValue() failed on DeviceProfile.Id: " + err.Error())
		}
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the DeviceProfile_ struct to create conditions.
// Keep the *DeviceProfileQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *DeviceProfileBox) Query(conditions ...objectbox.Condition) *DeviceProfileQuery {
	return &DeviceProfileQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the DeviceProfile_ struct to create conditions.
// Keep the *DeviceProfileQuery if you intend to execute the query multiple times.
func (box *DeviceProfileBox) QueryOrError(conditions ...objectbox.Condition) (*DeviceProfileQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &DeviceProfileQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See DeviceProfileAsyncBox for more information.
func (box *DeviceProfileBox) Async() *DeviceProfileAsyncBox {
	return &DeviceProfileAsyncBox{AsyncBox: box.Box.Async()}
}

// DeviceProfileAsyncBox provides asynchronous operations on DeviceProfile objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type DeviceProfileAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForDeviceProfile creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use DeviceProfileBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForDeviceProfile(ob *objectbox.ObjectBox, timeoutMs uint64) *DeviceProfileAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 5, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 5: %s" + err.Error())
	}
	return &DeviceProfileAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *DeviceProfileAsyncBox) Put(object *DeviceProfile) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *DeviceProfileAsyncBox) Insert(object *DeviceProfile) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *DeviceProfileAsyncBox) Update(object *DeviceProfile) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *DeviceProfileAsyncBox) Remove(object *DeviceProfile) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all DeviceProfile which Id is either 42 or 47:
// 		box.Query(DeviceProfile_.Id.In(42, 47)).Find()
type DeviceProfileQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *DeviceProfileQuery) Find() ([]DeviceProfile, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]DeviceProfile), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *DeviceProfileQuery) Offset(offset uint64) *DeviceProfileQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *DeviceProfileQuery) Limit(limit uint64) *DeviceProfileQuery {
	query.Query.Limit(limit)
	return query
}
