// automatically generated by the FlatBuffers compiler, do not modify

package flatcoredata

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Reading struct {
	_tab flatbuffers.Table
}

func GetRootAsReading(buf []byte, offset flatbuffers.UOffsetT) *Reading {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Reading{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Reading) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Reading) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Reading) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Reading) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

/// Belongs to event
func (rcv *Reading) EventId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Belongs to event
func (rcv *Reading) MutateEventId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

/// When the data was pushed out of EdgeX (0 - not pushed yet)
func (rcv *Reading) Pushed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// When the data was pushed out of EdgeX (0 - not pushed yet)
func (rcv *Reading) MutatePushed(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

/// When the reading was created
func (rcv *Reading) Created() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// When the reading was created
func (rcv *Reading) MutateCreated(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Reading) Origin() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Reading) MutateOrigin(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *Reading) Modified() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Reading) MutateModified(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *Reading) Device() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Reading) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Device sensor data value
func (rcv *Reading) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Device sensor data value
func ReadingStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ReadingAddId(builder *flatbuffers.Builder, Id uint64) {
	builder.PrependUint64Slot(0, Id, 0)
}
func ReadingAddEventId(builder *flatbuffers.Builder, EventId uint64) {
	builder.PrependUint64Slot(1, EventId, 0)
}
func ReadingAddPushed(builder *flatbuffers.Builder, Pushed int64) {
	builder.PrependInt64Slot(2, Pushed, 0)
}
func ReadingAddCreated(builder *flatbuffers.Builder, Created int64) {
	builder.PrependInt64Slot(3, Created, 0)
}
func ReadingAddOrigin(builder *flatbuffers.Builder, Origin int64) {
	builder.PrependInt64Slot(4, Origin, 0)
}
func ReadingAddModified(builder *flatbuffers.Builder, Modified int64) {
	builder.PrependInt64Slot(5, Modified, 0)
}
func ReadingAddDevice(builder *flatbuffers.Builder, Device flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(Device), 0)
}
func ReadingAddName(builder *flatbuffers.Builder, Name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(Name), 0)
}
func ReadingAddValue(builder *flatbuffers.Builder, Value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(Value), 0)
}
func ReadingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
