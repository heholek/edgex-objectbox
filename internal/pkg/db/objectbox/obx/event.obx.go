// Code generated by ObjectBox; DO NOT EDIT.

package obx

import (
	. "github.com/edgexfoundry/edgex-go/pkg/models"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
	"gopkg.in/mgo.v2/bson"
	"strconv"
)

type event_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var EventBinding = event_EntityInfo{
	Id:  2,
	Uid: 1178265010818176999,
}

// Event_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Event_ = struct {
	ID       *objectbox.PropertyStringUint64
	Pushed   *objectbox.PropertyInt64
	Device   *objectbox.PropertyString
	Created  *objectbox.PropertyInt64
	Modified *objectbox.PropertyInt64
	Origin   *objectbox.PropertyInt64
	Event    *objectbox.PropertyString
}{
	ID: &objectbox.PropertyStringUint64{
		Property: &objectbox.Property{
			Id: 1,
		},
	},
	Pushed: &objectbox.PropertyInt64{
		Property: &objectbox.Property{
			Id: 2,
		},
	},
	Device: &objectbox.PropertyString{
		Property: &objectbox.Property{
			Id: 3,
		},
	},
	Created: &objectbox.PropertyInt64{
		Property: &objectbox.Property{
			Id: 4,
		},
	},
	Modified: &objectbox.PropertyInt64{
		Property: &objectbox.Property{
			Id: 5,
		},
	},
	Origin: &objectbox.PropertyInt64{
		Property: &objectbox.Property{
			Id: 6,
		},
	},
	Event: &objectbox.PropertyString{
		Property: &objectbox.Property{
			Id: 7,
		},
	},
}

// GeneratorVersion is called by the ObjectBox to verify the compatibility of the generator used to generate this code
func (event_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by the ObjectBox during model build
func (event_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Event", 2, 1178265010818176999)
	model.Property("ID", objectbox.PropertyType_Long, 1, 5343741603054182294)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Pushed", objectbox.PropertyType_Long, 2, 988356205886230658)
	model.Property("Device", objectbox.PropertyType_String, 3, 547494163242520795)
	model.Property("Created", objectbox.PropertyType_Long, 4, 4835403394493985943)
	model.Property("Modified", objectbox.PropertyType_Long, 5, 7876073989912232265)
	model.Property("Origin", objectbox.PropertyType_Long, 6, 5439191943825546728)
	model.Property("Event", objectbox.PropertyType_String, 7, 6873756094930880265)
	model.EntityLastPropertyId(7, 6873756094930880265)
}

// GetId is called by the ObjectBox during Put operations to check for existing ID on an object
func (event_EntityInfo) GetId(object interface{}) (uint64, error) {
	if len(object.(*Event).ID) == 0 {
		return 0, nil
	} else {
		return strconv.ParseUint(string(object.(*Event).ID), 10, 64)
	}
}

// SetId is called by the ObjectBox during Put to update an ID on an object that has just been inserted
func (event_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*Event).ID = bson.ObjectId(strconv.FormatUint(id, 10))
	return nil
}

// Flatten is called by the ObjectBox to transform an object to a FlatBuffer
func (event_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*Event)
	var offsetDevice = fbutils.CreateStringOffset(fbb, obj.Device)
	var offsetEvent = fbutils.CreateStringOffset(fbb, obj.Event)

	// build the FlatBuffers object
	fbb.StartObject(7)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetInt64Slot(fbb, 1, obj.Pushed)
	fbutils.SetUOffsetTSlot(fbb, 2, offsetDevice)
	fbutils.SetInt64Slot(fbb, 3, obj.Created)
	fbutils.SetInt64Slot(fbb, 4, obj.Modified)
	fbutils.SetInt64Slot(fbb, 5, obj.Origin)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetEvent)
}

// ToObject is called by the ObjectBox to load an object from a FlatBuffer
func (event_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &Event{
		ID:       bson.ObjectId(strconv.FormatUint(table.GetUint64Slot(4, 0), 10)),
		Pushed:   table.GetInt64Slot(6, 0),
		Device:   fbutils.GetStringSlot(table, 8),
		Created:  table.GetInt64Slot(10, 0),
		Modified: table.GetInt64Slot(12, 0),
		Origin:   table.GetInt64Slot(14, 0),
		Event:    fbutils.GetStringSlot(table, 16),
	}
}

// MakeSlice is called by the ObjectBox to construct a new slice to hold the read objects
func (event_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Event, 0, capacity)
}

// AppendToSlice is called by the ObjectBox to fill the slice of the read objects
func (event_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*Event), object.(*Event))
}

// Box provides CRUD access to Event objects
type EventBox struct {
	*objectbox.Box
}

// BoxForEvent opens a box of Event objects
func BoxForEvent(ob *objectbox.ObjectBox) *EventBox {
	return &EventBox{
		Box: ob.InternalBox(2),
	}
}

// Put synchronously inserts/updates a single object.
// In case the ID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Event.ID property on the passed object will be assigned the new ID as well.
func (box *EventBox) Put(object *Event) (string, error) {
	if id, err := box.Box.Put(object); err != nil {
		return "", err
	} else {
		return strconv.FormatUint(id, 10), nil
	}
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the Event.ID property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *EventBox) PutAsync(object *Event) (string, error) {
	if id, err := box.Box.PutAsync(object); err != nil {
		return "", err
	} else {
		return strconv.FormatUint(id, 10), nil
	}
}

// PutAll inserts multiple objects in single transaction.
// In case IDs are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Event.ID property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Event.ID assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *EventBox) PutAll(objects []*Event) ([]string, error) {
	ids, err := box.Box.PutAll(objects)
	if err != nil || len(ids) == 0 {
		return []string{}, err
	}

	var stringIds = make([]string, len(ids))
	for i, id := range ids {
		stringIds[i] = strconv.FormatUint(id, 10)
	}

	return stringIds, nil
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *EventBox) Get(id string) (*Event, error) {
	idUint64, parseErr := strconv.ParseUint(id, 10, 64)
	if parseErr != nil {
		return nil, parseErr
	}

	object, err := box.Box.Get(idUint64)

	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Event), nil
}

// Get reads all stored objects
func (box *EventBox) GetAll() ([]*Event, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Event), nil
}

// Remove deletes a single object
func (box *EventBox) Remove(object *Event) (err error) {
	idUint64, parseErr := strconv.ParseUint(string(object.ID), 10, 64)
	if parseErr != nil {
		return parseErr
	}

	return box.Box.Remove(idUint64)
}

// Creates a query with the given conditions. Use the fields of the Event_ struct to create conditions.
// Keep the *EventQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *EventBox) Query(conditions ...objectbox.Condition) *EventQuery {
	return &EventQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Event_ struct to create conditions.
// Keep the *EventQuery if you intend to execute the query multiple times.
func (box *EventBox) QueryOrError(conditions ...objectbox.Condition) (*EventQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &EventQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all Event which ID is either 42 or 47:
// 		box.Query(Event_.ID.In(42, 47)).Find()
type EventQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *EventQuery) Find() ([]*Event, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*Event), nil
}
