// Code generated by ObjectBox; DO NOT EDIT.

package obx

import (
	"github.com/edgexfoundry/edgex-go/pkg/models"
	. "github.com/edgexfoundry/edgex-go/pkg/models"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type registration_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var RegistrationBinding = registration_EntityInfo{
	Id:  13,
	Uid: 7634570582013981061,
}

// Registration_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Registration_ = struct {
	ID                        *objectbox.PropertyUint64
	Created                   *objectbox.PropertyInt64
	Modified                  *objectbox.PropertyInt64
	Origin                    *objectbox.PropertyInt64
	Name                      *objectbox.PropertyString
	Addressable               *objectbox.PropertyUint64
	Format                    *objectbox.PropertyString
	Filter_DeviceIDs          *objectbox.PropertyStringVector
	Filter_ValueDescriptorIDs *objectbox.PropertyStringVector
	Encryption_Algo           *objectbox.PropertyString
	Encryption_Key            *objectbox.PropertyString
	Encryption_InitVector     *objectbox.PropertyString
	Compression               *objectbox.PropertyString
	Enable                    *objectbox.PropertyBool
	Destination               *objectbox.PropertyString
}{
	ID: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Created: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Modified: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Origin: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 4,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 5,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Addressable: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 6,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Format: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 7,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Filter_DeviceIDs: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id: 8,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Filter_ValueDescriptorIDs: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id: 9,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Encryption_Algo: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 10,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Encryption_Key: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 11,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Encryption_InitVector: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 12,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Compression: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 13,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Enable: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id: 14,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
	Destination: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 15,
			Entity: &objectbox.Entity{
				Id: 13,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (registration_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (registration_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Registration", 13, 7634570582013981061)
	model.Property("ID", objectbox.PropertyType_Long, 1, 4739600724391841289)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Created", objectbox.PropertyType_Long, 2, 1865096029168372524)
	model.Property("Modified", objectbox.PropertyType_Long, 3, 2482875418636968909)
	model.Property("Origin", objectbox.PropertyType_Long, 4, 7127382488741398936)
	model.Property("Name", objectbox.PropertyType_String, 5, 4295782988966448821)
	model.PropertyFlags(objectbox.PropertyFlags_UNIQUE)
	model.PropertyIndex(15, 1279714968304775307)
	model.Property("Addressable", objectbox.PropertyType_Relation, 6, 3735895927695370569)
	model.PropertyRelation("Addressable", 16, 473343030382928749)
	model.Property("Format", objectbox.PropertyType_String, 7, 4078554114893980436)
	model.Property("Filter_DeviceIDs", objectbox.PropertyType_StringVector, 8, 4590597437897473969)
	model.Property("Filter_ValueDescriptorIDs", objectbox.PropertyType_StringVector, 9, 2336536679363645756)
	model.Property("Encryption_Algo", objectbox.PropertyType_String, 10, 2515537038240284280)
	model.Property("Encryption_Key", objectbox.PropertyType_String, 11, 380896508047194758)
	model.Property("Encryption_InitVector", objectbox.PropertyType_String, 12, 7862731985842271541)
	model.Property("Compression", objectbox.PropertyType_String, 13, 7574209528919188724)
	model.Property("Enable", objectbox.PropertyType_Bool, 14, 5441578513058459009)
	model.Property("Destination", objectbox.PropertyType_String, 15, 4611276071137162060)
	model.EntityLastPropertyId(15, 4611276071137162060)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (registration_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*Registration); ok {
		return objectbox.StringIdConvertToDatabaseValue(obj.ID), nil
	} else {
		return objectbox.StringIdConvertToDatabaseValue(object.(Registration).ID), nil
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (registration_EntityInfo) SetId(object interface{}, id uint64) {
	if obj, ok := object.(*Registration); ok {
		obj.ID = objectbox.StringIdConvertToEntityProperty(id)
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(Registration).ID
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (registration_EntityInfo) PutRelated(txn *objectbox.Transaction, object interface{}, id uint64) error {
	if rel := &object.(*Registration).Addressable; rel != nil {
		rId, err := AddressableBinding.GetId(rel)
		if err != nil {
			return err
		} else if rId == 0 {
			if err := txn.RunWithCursor(AddressableBinding.Id, func(targetCursor *objectbox.Cursor) error {
				_, err := targetCursor.Put(rel) // NOTE Put/PutAsync() has a side-effect of setting the rel.ID
				return err
			}); err != nil {
				return err
			}
		}
	}
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (registration_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*Registration)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)
	var offsetFormat = fbutils.CreateStringOffset(fbb, obj.Format)
	var offsetFilter_DeviceIDs = fbutils.CreateStringVectorOffset(fbb, obj.Filter.DeviceIDs)
	var offsetFilter_ValueDescriptorIDs = fbutils.CreateStringVectorOffset(fbb, obj.Filter.ValueDescriptorIDs)
	var offsetEncryption_Algo = fbutils.CreateStringOffset(fbb, obj.Encryption.Algo)
	var offsetEncryption_Key = fbutils.CreateStringOffset(fbb, obj.Encryption.Key)
	var offsetEncryption_InitVector = fbutils.CreateStringOffset(fbb, obj.Encryption.InitVector)
	var offsetCompression = fbutils.CreateStringOffset(fbb, obj.Compression)
	var offsetDestination = fbutils.CreateStringOffset(fbb, obj.Destination)

	var rIdAddressable uint64
	if rel := &obj.Addressable; rel != nil {
		if rId, err := AddressableBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdAddressable = rId
		}
	}

	// build the FlatBuffers object
	fbb.StartObject(15)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetInt64Slot(fbb, 1, obj.Created)
	fbutils.SetInt64Slot(fbb, 2, obj.Modified)
	fbutils.SetInt64Slot(fbb, 3, obj.Origin)
	fbutils.SetUOffsetTSlot(fbb, 4, offsetName)
	fbutils.SetUint64Slot(fbb, 5, rIdAddressable)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetFormat)
	fbutils.SetUOffsetTSlot(fbb, 7, offsetFilter_DeviceIDs)
	fbutils.SetUOffsetTSlot(fbb, 8, offsetFilter_ValueDescriptorIDs)
	fbutils.SetUOffsetTSlot(fbb, 9, offsetEncryption_Algo)
	fbutils.SetUOffsetTSlot(fbb, 10, offsetEncryption_Key)
	fbutils.SetUOffsetTSlot(fbb, 11, offsetEncryption_InitVector)
	fbutils.SetUOffsetTSlot(fbb, 12, offsetCompression)
	fbutils.SetBoolSlot(fbb, 13, obj.Enable)
	fbutils.SetUOffsetTSlot(fbb, 14, offsetDestination)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (registration_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) (interface{}, error) {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	var relAddressable *Addressable
	if rId := table.GetUint64Slot(14, 0); rId > 0 {
		if err := txn.RunWithCursor(AddressableBinding.Id, func(targetCursor *objectbox.Cursor) error {
			if relObject, err := targetCursor.Get(rId); err != nil {
				return err
			} else if relObj, ok := relObject.(*Addressable); ok {
				relAddressable = relObj
			} else {
				var relObj = relObject.(Addressable)
				relAddressable = &relObj
			}
			return nil
		}); err != nil {
			return nil, err
		}
	} else {
		relAddressable = &Addressable{}
	}

	return &Registration{
		ID:          objectbox.StringIdConvertToEntityProperty(id),
		Created:     table.GetInt64Slot(6, 0),
		Modified:    table.GetInt64Slot(8, 0),
		Origin:      table.GetInt64Slot(10, 0),
		Name:        fbutils.GetStringSlot(table, 12),
		Addressable: *relAddressable,
		Format:      fbutils.GetStringSlot(table, 16),
		Filter: models.Filter{
			DeviceIDs:          fbutils.GetStringVectorSlot(table, 18),
			ValueDescriptorIDs: fbutils.GetStringVectorSlot(table, 20),
		},
		Encryption: models.EncryptionDetails{
			Algo:       fbutils.GetStringSlot(table, 22),
			Key:        fbutils.GetStringSlot(table, 24),
			InitVector: fbutils.GetStringSlot(table, 26),
		},
		Compression: fbutils.GetStringSlot(table, 28),
		Enable:      table.GetBoolSlot(30, false),
		Destination: fbutils.GetStringSlot(table, 32),
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (registration_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]Registration, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (registration_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]Registration), *object.(*Registration))
}

// Box provides CRUD access to Registration objects
type RegistrationBox struct {
	*objectbox.Box
}

// BoxForRegistration opens a box of Registration objects
func BoxForRegistration(ob *objectbox.ObjectBox) *RegistrationBox {
	return &RegistrationBox{
		Box: ob.InternalBox(13),
	}
}

// Put synchronously inserts/updates a single object.
// In case the ID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Registration.ID property on the passed object will be assigned the new ID as well.
func (box *RegistrationBox) Put(object *Registration) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the Registration.ID property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *RegistrationBox) PutAsync(object *Registration) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case IDs are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Registration.ID property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Registration.ID assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *RegistrationBox) PutAll(objects []Registration) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *RegistrationBox) Get(id uint64) (*Registration, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Registration), nil
}

// Get reads all stored objects
func (box *RegistrationBox) GetAll() ([]Registration, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]Registration), nil
}

// Remove deletes a single object
func (box *RegistrationBox) Remove(object *Registration) (err error) {
	return box.Box.Remove(objectbox.StringIdConvertToDatabaseValue(object.ID))
}

// Creates a query with the given conditions. Use the fields of the Registration_ struct to create conditions.
// Keep the *RegistrationQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *RegistrationBox) Query(conditions ...objectbox.Condition) *RegistrationQuery {
	return &RegistrationQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Registration_ struct to create conditions.
// Keep the *RegistrationQuery if you intend to execute the query multiple times.
func (box *RegistrationBox) QueryOrError(conditions ...objectbox.Condition) (*RegistrationQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &RegistrationQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all Registration which ID is either 42 or 47:
// 		box.Query(Registration_.ID.In(42, 47)).Find()
type RegistrationQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *RegistrationQuery) Find() ([]Registration, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]Registration), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *RegistrationQuery) Offset(offset uint64) *RegistrationQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *RegistrationQuery) Limit(limit uint64) *RegistrationQuery {
	query.Query.Limit(limit)
	return query
}
