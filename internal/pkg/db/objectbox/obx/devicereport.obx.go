// Code generated by ObjectBox; DO NOT EDIT.

package obx

import (
	"github.com/edgexfoundry/edgex-go/pkg/models"
	. "github.com/edgexfoundry/edgex-go/pkg/models"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type deviceReport_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var DeviceReportBinding = deviceReport_EntityInfo{
	Id:  9,
	Uid: 7590857651029402082,
}

// DeviceReport_ contains type-based Property helpers to facilitate some common operations such as Queries.
var DeviceReport_ = struct {
	Created  *objectbox.PropertyInt64
	Modified *objectbox.PropertyInt64
	Origin   *objectbox.PropertyInt64
	Id       *objectbox.PropertyUint64
	Name     *objectbox.PropertyString
	Device   *objectbox.PropertyString
	Event    *objectbox.PropertyString
	Expected *objectbox.PropertyStringVector
}{
	Created: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 9,
			},
		},
	},
	Modified: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 9,
			},
		},
	},
	Origin: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 9,
			},
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 4,
			Entity: &objectbox.Entity{
				Id: 9,
			},
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 5,
			Entity: &objectbox.Entity{
				Id: 9,
			},
		},
	},
	Device: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 6,
			Entity: &objectbox.Entity{
				Id: 9,
			},
		},
	},
	Event: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 7,
			Entity: &objectbox.Entity{
				Id: 9,
			},
		},
	},
	Expected: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id: 8,
			Entity: &objectbox.Entity{
				Id: 9,
			},
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (deviceReport_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by ObjectBox during model build
func (deviceReport_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("DeviceReport", 9, 7590857651029402082)
	model.Property("Created", objectbox.PropertyType_Long, 1, 4933474896156374694)
	model.Property("Modified", objectbox.PropertyType_Long, 2, 1969099305848705273)
	model.Property("Origin", objectbox.PropertyType_Long, 3, 1979297495845376553)
	model.Property("Id", objectbox.PropertyType_Long, 4, 1146785498998559308)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Name", objectbox.PropertyType_String, 5, 606353385103192842)
	model.PropertyFlags(objectbox.PropertyFlags_UNIQUE)
	model.PropertyIndex(7, 1153755119419732754)
	model.Property("Device", objectbox.PropertyType_String, 6, 8430482458681254821)
	model.Property("Event", objectbox.PropertyType_String, 7, 9169333573500203216)
	model.Property("Expected", objectbox.PropertyType_StringVector, 8, 8302111629024204632)
	model.EntityLastPropertyId(8, 8302111629024204632)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (deviceReport_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*DeviceReport); ok {
		return objectbox.StringIdConvertToDatabaseValue(obj.Id), nil
	} else {
		return objectbox.StringIdConvertToDatabaseValue(object.(DeviceReport).Id), nil
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (deviceReport_EntityInfo) SetId(object interface{}, id uint64) {
	if obj, ok := object.(*DeviceReport); ok {
		obj.Id = objectbox.StringIdConvertToEntityProperty(id)
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(DeviceReport).Id
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (deviceReport_EntityInfo) PutRelated(txn *objectbox.Transaction, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (deviceReport_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*DeviceReport)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)
	var offsetDevice = fbutils.CreateStringOffset(fbb, obj.Device)
	var offsetEvent = fbutils.CreateStringOffset(fbb, obj.Event)
	var offsetExpected = fbutils.CreateStringVectorOffset(fbb, obj.Expected)

	// build the FlatBuffers object
	fbb.StartObject(8)
	fbutils.SetInt64Slot(fbb, 0, obj.Created)
	fbutils.SetInt64Slot(fbb, 1, obj.Modified)
	fbutils.SetInt64Slot(fbb, 2, obj.Origin)
	fbutils.SetUint64Slot(fbb, 3, id)
	fbutils.SetUOffsetTSlot(fbb, 4, offsetName)
	fbutils.SetUOffsetTSlot(fbb, 5, offsetDevice)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetEvent)
	fbutils.SetUOffsetTSlot(fbb, 7, offsetExpected)
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (deviceReport_EntityInfo) Load(txn *objectbox.Transaction, bytes []byte) interface{} {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(10, 0)

	return &DeviceReport{
		BaseObject: models.BaseObject{
			Created:  table.GetInt64Slot(4, 0),
			Modified: table.GetInt64Slot(6, 0),
			Origin:   table.GetInt64Slot(8, 0),
		},
		Id:       objectbox.StringIdConvertToEntityProperty(id),
		Name:     fbutils.GetStringSlot(table, 12),
		Device:   fbutils.GetStringSlot(table, 14),
		Event:    fbutils.GetStringSlot(table, 16),
		Expected: fbutils.GetStringVectorSlot(table, 18),
	}
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (deviceReport_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]DeviceReport, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (deviceReport_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]DeviceReport), *object.(*DeviceReport))
}

// Box provides CRUD access to DeviceReport objects
type DeviceReportBox struct {
	*objectbox.Box
}

// BoxForDeviceReport opens a box of DeviceReport objects
func BoxForDeviceReport(ob *objectbox.ObjectBox) *DeviceReportBox {
	return &DeviceReportBox{
		Box: ob.InternalBox(9),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the DeviceReport.Id property on the passed object will be assigned the new ID as well.
func (box *DeviceReportBox) Put(object *DeviceReport) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the DeviceReport.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *DeviceReportBox) PutAsync(object *DeviceReport) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the DeviceReport.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the DeviceReport.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *DeviceReportBox) PutAll(objects []DeviceReport) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *DeviceReportBox) Get(id uint64) (*DeviceReport, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*DeviceReport), nil
}

// Get reads all stored objects
func (box *DeviceReportBox) GetAll() ([]DeviceReport, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]DeviceReport), nil
}

// Remove deletes a single object
func (box *DeviceReportBox) Remove(object *DeviceReport) (err error) {
	return box.Box.Remove(objectbox.StringIdConvertToDatabaseValue(object.Id))
}

// Creates a query with the given conditions. Use the fields of the DeviceReport_ struct to create conditions.
// Keep the *DeviceReportQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *DeviceReportBox) Query(conditions ...objectbox.Condition) *DeviceReportQuery {
	return &DeviceReportQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the DeviceReport_ struct to create conditions.
// Keep the *DeviceReportQuery if you intend to execute the query multiple times.
func (box *DeviceReportBox) QueryOrError(conditions ...objectbox.Condition) (*DeviceReportQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &DeviceReportQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all DeviceReport which Id is either 42 or 47:
// 		box.Query(DeviceReport_.Id.In(42, 47)).Find()
type DeviceReportQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *DeviceReportQuery) Find() ([]DeviceReport, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]DeviceReport), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *DeviceReportQuery) Offset(offset uint64) *DeviceReportQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *DeviceReportQuery) Limit(limit uint64) *DeviceReportQuery {
	query.Query.Limit(limit)
	return query
}
