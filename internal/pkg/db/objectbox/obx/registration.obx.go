// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package obx

import (
	"errors"
	"github.com/edgexfoundry/go-mod-core-contracts/models"
	. "github.com/edgexfoundry/go-mod-core-contracts/models"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type registration_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var RegistrationBinding = registration_EntityInfo{
	Entity: objectbox.Entity{
		Id: 13,
	},
	Uid: 8697442173660558194,
}

// Registration_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Registration_ = struct {
	ID                        *objectbox.PropertyUint64
	Created                   *objectbox.PropertyInt64
	Modified                  *objectbox.PropertyInt64
	Origin                    *objectbox.PropertyInt64
	Name                      *objectbox.PropertyString
	Addressable               *objectbox.RelationToOne
	Format                    *objectbox.PropertyString
	Filter_DeviceIDs          *objectbox.PropertyStringVector
	Filter_ValueDescriptorIDs *objectbox.PropertyStringVector
	Encryption_Algo           *objectbox.PropertyString
	Encryption_Key            *objectbox.PropertyString
	Encryption_InitVector     *objectbox.PropertyString
	Compression               *objectbox.PropertyString
	Enable                    *objectbox.PropertyBool
	Destination               *objectbox.PropertyString
}{
	ID: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Created: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Modified: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Origin: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     5,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Addressable: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     6,
			Entity: &RegistrationBinding.Entity,
		},
		Target: &AddressableBinding.Entity,
	},
	Format: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Filter_DeviceIDs: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Filter_ValueDescriptorIDs: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Encryption_Algo: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Encryption_Key: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     11,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Encryption_InitVector: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     12,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Compression: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     13,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Enable: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     14,
			Entity: &RegistrationBinding.Entity,
		},
	},
	Destination: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     15,
			Entity: &RegistrationBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (registration_EntityInfo) GeneratorVersion() int {
	return 4
}

// AddToModel is called by ObjectBox during model build
func (registration_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Registration", 13, 8697442173660558194)
	model.Property("ID", 6, 1, 123887931587262126)
	model.PropertyFlags(1)
	model.Property("Created", 6, 2, 1402964767567004529)
	model.Property("Modified", 6, 3, 3592048256596347124)
	model.Property("Origin", 6, 4, 6512940430179949006)
	model.Property("Name", 9, 5, 471898448094503251)
	model.PropertyFlags(32)
	model.PropertyIndex(15, 3183733801868506910)
	model.Property("Addressable", 11, 6, 8935979958445686361)
	model.PropertyFlags(8712)
	model.PropertyRelation("Addressable", 16, 6932752998076836248)
	model.Property("Format", 9, 7, 3541213098300435357)
	model.Property("Filter_DeviceIDs", 30, 8, 2123523082225229536)
	model.Property("Filter_ValueDescriptorIDs", 30, 9, 1568686084581981546)
	model.Property("Encryption_Algo", 9, 10, 99228324085287014)
	model.Property("Encryption_Key", 9, 11, 46279435191312724)
	model.Property("Encryption_InitVector", 9, 12, 5459531335994809378)
	model.Property("Compression", 9, 13, 2579287944068867159)
	model.Property("Enable", 1, 14, 3485720785546906540)
	model.Property("Destination", 9, 15, 1837331318685115169)
	model.EntityLastPropertyId(15, 1837331318685115169)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (registration_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*Registration); ok {
		return objectbox.StringIdConvertToDatabaseValue(obj.ID)
	} else {
		return objectbox.StringIdConvertToDatabaseValue(object.(Registration).ID)
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (registration_EntityInfo) SetId(object interface{}, id uint64) error {
	if obj, ok := object.(*Registration); ok {
		var err error
		obj.ID, err = objectbox.StringIdConvertToEntityProperty(id)
		return err
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(Registration).ID
		return nil
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (registration_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	if rel := &object.(*Registration).Addressable; rel != nil {
		if rId, err := AddressableBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForAddressable(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (registration_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	var obj *Registration
	if objPtr, ok := object.(*Registration); ok {
		obj = objPtr
	} else {
		objVal := object.(Registration)
		obj = &objVal
	}

	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)
	var offsetFormat = fbutils.CreateStringOffset(fbb, obj.Format)
	var offsetFilter_DeviceIDs = fbutils.CreateStringVectorOffset(fbb, obj.Filter.DeviceIDs)
	var offsetFilter_ValueDescriptorIDs = fbutils.CreateStringVectorOffset(fbb, obj.Filter.ValueDescriptorIDs)
	var offsetEncryption_Algo = fbutils.CreateStringOffset(fbb, obj.Encryption.Algo)
	var offsetEncryption_Key = fbutils.CreateStringOffset(fbb, obj.Encryption.Key)
	var offsetEncryption_InitVector = fbutils.CreateStringOffset(fbb, obj.Encryption.InitVector)
	var offsetCompression = fbutils.CreateStringOffset(fbb, obj.Compression)
	var offsetDestination = fbutils.CreateStringOffset(fbb, obj.Destination)

	var rIdAddressable uint64
	if rel := &obj.Addressable; rel != nil {
		if rId, err := AddressableBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdAddressable = rId
		}
	}

	// build the FlatBuffers object
	fbb.StartObject(15)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetInt64Slot(fbb, 1, obj.Created)
	fbutils.SetInt64Slot(fbb, 2, obj.Modified)
	fbutils.SetInt64Slot(fbb, 3, obj.Origin)
	fbutils.SetUOffsetTSlot(fbb, 4, offsetName)
	fbutils.SetUint64Slot(fbb, 5, rIdAddressable)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetFormat)
	fbutils.SetUOffsetTSlot(fbb, 7, offsetFilter_DeviceIDs)
	fbutils.SetUOffsetTSlot(fbb, 8, offsetFilter_ValueDescriptorIDs)
	fbutils.SetUOffsetTSlot(fbb, 9, offsetEncryption_Algo)
	fbutils.SetUOffsetTSlot(fbb, 10, offsetEncryption_Key)
	fbutils.SetUOffsetTSlot(fbb, 11, offsetEncryption_InitVector)
	fbutils.SetUOffsetTSlot(fbb, 12, offsetCompression)
	fbutils.SetBoolSlot(fbb, 13, obj.Enable)
	fbutils.SetUOffsetTSlot(fbb, 14, offsetDestination)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (registration_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'Registration' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	propID, err := objectbox.StringIdConvertToEntityProperty(fbutils.GetUint64Slot(table, 4))
	if err != nil {
		return nil, errors.New("converter objectbox.StringIdConvertToEntityProperty() failed on Registration.ID: " + err.Error())
	}

	var relAddressable *Addressable
	if rId := fbutils.GetUint64Slot(table, 14); rId > 0 {
		if rObject, err := BoxForAddressable(ob).Get(rId); err != nil {
			return nil, err
		} else if rObject == nil {
			relAddressable = &Addressable{}
		} else {
			relAddressable = rObject
		}
	} else {
		relAddressable = &Addressable{}
	}

	return &Registration{
		ID:          propID,
		Created:     fbutils.GetInt64Slot(table, 6),
		Modified:    fbutils.GetInt64Slot(table, 8),
		Origin:      fbutils.GetInt64Slot(table, 10),
		Name:        fbutils.GetStringSlot(table, 12),
		Addressable: *relAddressable,
		Format:      fbutils.GetStringSlot(table, 16),
		Filter: models.Filter{
			DeviceIDs:          fbutils.GetStringVectorSlot(table, 18),
			ValueDescriptorIDs: fbutils.GetStringVectorSlot(table, 20),
		},
		Encryption: models.EncryptionDetails{
			Algo:       fbutils.GetStringSlot(table, 22),
			Key:        fbutils.GetStringSlot(table, 24),
			InitVector: fbutils.GetStringSlot(table, 26),
		},
		Compression: fbutils.GetStringSlot(table, 28),
		Enable:      fbutils.GetBoolSlot(table, 30),
		Destination: fbutils.GetStringSlot(table, 32),
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (registration_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]Registration, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (registration_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]Registration), Registration{})
	}
	return append(slice.([]Registration), *object.(*Registration))
}

// Box provides CRUD access to Registration objects
type RegistrationBox struct {
	*objectbox.Box
}

// BoxForRegistration opens a box of Registration objects
func BoxForRegistration(ob *objectbox.ObjectBox) *RegistrationBox {
	return &RegistrationBox{
		Box: ob.InternalBox(13),
	}
}

// Put synchronously inserts/updates a single object.
// In case the ID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Registration.ID property on the passed object will be assigned the new ID as well.
func (box *RegistrationBox) Put(object *Registration) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the ID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Registration.ID property on the passed object will be assigned the new ID as well.
func (box *RegistrationBox) Insert(object *Registration) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *RegistrationBox) Update(object *Registration) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *RegistrationBox) PutAsync(object *Registration) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case IDs are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Registration.ID property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Registration.ID assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *RegistrationBox) PutMany(objects []Registration) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *RegistrationBox) Get(id uint64) (*Registration, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Registration), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is an empty object
func (box *RegistrationBox) GetMany(ids ...uint64) ([]Registration, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]Registration), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *RegistrationBox) GetManyExisting(ids ...uint64) ([]Registration, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]Registration), nil
}

// GetAll reads all stored objects
func (box *RegistrationBox) GetAll() ([]Registration, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]Registration), nil
}

// Remove deletes a single object
func (box *RegistrationBox) Remove(object *Registration) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *RegistrationBox) RemoveMany(objects ...*Registration) (uint64, error) {
	var ids = make([]uint64, len(objects))
	var err error
	for k, object := range objects {
		ids[k], err = objectbox.StringIdConvertToDatabaseValue(object.ID)
		if err != nil {
			return 0, errors.New("converter objectbox.StringIdConvertToDatabaseValue() failed on Registration.ID: " + err.Error())
		}
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the Registration_ struct to create conditions.
// Keep the *RegistrationQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *RegistrationBox) Query(conditions ...objectbox.Condition) *RegistrationQuery {
	return &RegistrationQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Registration_ struct to create conditions.
// Keep the *RegistrationQuery if you intend to execute the query multiple times.
func (box *RegistrationBox) QueryOrError(conditions ...objectbox.Condition) (*RegistrationQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &RegistrationQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See RegistrationAsyncBox for more information.
func (box *RegistrationBox) Async() *RegistrationAsyncBox {
	return &RegistrationAsyncBox{AsyncBox: box.Box.Async()}
}

// RegistrationAsyncBox provides asynchronous operations on Registration objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type RegistrationAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForRegistration creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use RegistrationBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForRegistration(ob *objectbox.ObjectBox, timeoutMs uint64) *RegistrationAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 13, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 13: %s" + err.Error())
	}
	return &RegistrationAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the ID property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *RegistrationAsyncBox) Put(object *Registration) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The ID property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *RegistrationAsyncBox) Insert(object *Registration) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *RegistrationAsyncBox) Update(object *Registration) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *RegistrationAsyncBox) Remove(object *Registration) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all Registration which ID is either 42 or 47:
// 		box.Query(Registration_.ID.In(42, 47)).Find()
type RegistrationQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *RegistrationQuery) Find() ([]Registration, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]Registration), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *RegistrationQuery) Offset(offset uint64) *RegistrationQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *RegistrationQuery) Limit(limit uint64) *RegistrationQuery {
	query.Query.Limit(limit)
	return query
}
