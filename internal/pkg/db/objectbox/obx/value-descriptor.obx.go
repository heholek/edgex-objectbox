// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package obx

import (
	. "github.com/edgexfoundry/go-mod-core-contracts/models"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type valueDescriptor_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var ValueDescriptorBinding = valueDescriptor_EntityInfo{
	Entity: objectbox.Entity{
		Id: 16,
	},
	Uid: 2903250960703756959,
}

// ValueDescriptor_ contains type-based Property helpers to facilitate some common operations such as Queries.
var ValueDescriptor_ = struct {
	Id           *objectbox.PropertyUint64
	Created      *objectbox.PropertyInt64
	Description  *objectbox.PropertyString
	Modified     *objectbox.PropertyInt64
	Origin       *objectbox.PropertyInt64
	Name         *objectbox.PropertyString
	Min          *objectbox.PropertyByteVector
	Max          *objectbox.PropertyByteVector
	DefaultValue *objectbox.PropertyByteVector
	Type         *objectbox.PropertyString
	UomLabel     *objectbox.PropertyString
	Formatting   *objectbox.PropertyString
	Labels       *objectbox.PropertyStringVector
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Created: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Description: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Modified: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Origin: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     5,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     6,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Min: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Max: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	DefaultValue: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Type: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	UomLabel: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     11,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Formatting: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     12,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
	Labels: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     13,
			Entity: &ValueDescriptorBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (valueDescriptor_EntityInfo) GeneratorVersion() int {
	return 3
}

// AddToModel is called by ObjectBox during model build
func (valueDescriptor_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("ValueDescriptor", 16, 2903250960703756959)
	model.Property("Id", 6, 1, 6873011748171964323)
	model.PropertyFlags(8193)
	model.Property("Created", 6, 2, 1551957824880721748)
	model.Property("Description", 9, 3, 929837542342336953)
	model.Property("Modified", 6, 4, 6532154564935767763)
	model.Property("Origin", 6, 5, 8880716450337486833)
	model.Property("Name", 9, 6, 2621696991637966622)
	model.PropertyFlags(32)
	model.PropertyIndex(19, 8558604861306073232)
	model.Property("Min", 23, 7, 1578207995766742188)
	model.Property("Max", 23, 8, 1694373352675677816)
	model.Property("DefaultValue", 23, 9, 415476961418490344)
	model.Property("Type", 9, 10, 8376260686049225004)
	model.Property("UomLabel", 9, 11, 8683875949437263689)
	model.Property("Formatting", 9, 12, 6024578626204330523)
	model.Property("Labels", 30, 13, 3814172039806064934)
	model.EntityLastPropertyId(13, 3814172039806064934)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (valueDescriptor_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*ValueDescriptor); ok {
		return objectbox.StringIdConvertToDatabaseValue(obj.Id), nil
	} else {
		return objectbox.StringIdConvertToDatabaseValue(object.(ValueDescriptor).Id), nil
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (valueDescriptor_EntityInfo) SetId(object interface{}, id uint64) {
	if obj, ok := object.(*ValueDescriptor); ok {
		obj.Id = objectbox.StringIdConvertToEntityProperty(id)
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(ValueDescriptor).Id
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (valueDescriptor_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (valueDescriptor_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	var obj *ValueDescriptor
	if objPtr, ok := object.(*ValueDescriptor); ok {
		obj = objPtr
	} else {
		objVal := object.(ValueDescriptor)
		obj = &objVal
	}

	var offsetDescription = fbutils.CreateStringOffset(fbb, obj.Description)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)
	var offsetMin = fbutils.CreateByteVectorOffset(fbb, interfaceJsonToDatabaseValue(obj.Min))
	var offsetMax = fbutils.CreateByteVectorOffset(fbb, interfaceJsonToDatabaseValue(obj.Max))
	var offsetDefaultValue = fbutils.CreateByteVectorOffset(fbb, interfaceJsonToDatabaseValue(obj.DefaultValue))
	var offsetType = fbutils.CreateStringOffset(fbb, obj.Type)
	var offsetUomLabel = fbutils.CreateStringOffset(fbb, obj.UomLabel)
	var offsetFormatting = fbutils.CreateStringOffset(fbb, obj.Formatting)
	var offsetLabels = fbutils.CreateStringVectorOffset(fbb, obj.Labels)

	// build the FlatBuffers object
	fbb.StartObject(13)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetInt64Slot(fbb, 1, obj.Created)
	fbutils.SetUOffsetTSlot(fbb, 2, offsetDescription)
	fbutils.SetInt64Slot(fbb, 3, obj.Modified)
	fbutils.SetInt64Slot(fbb, 4, obj.Origin)
	fbutils.SetUOffsetTSlot(fbb, 5, offsetName)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetMin)
	fbutils.SetUOffsetTSlot(fbb, 7, offsetMax)
	fbutils.SetUOffsetTSlot(fbb, 8, offsetDefaultValue)
	fbutils.SetUOffsetTSlot(fbb, 9, offsetType)
	fbutils.SetUOffsetTSlot(fbb, 10, offsetUomLabel)
	fbutils.SetUOffsetTSlot(fbb, 11, offsetFormatting)
	fbutils.SetUOffsetTSlot(fbb, 12, offsetLabels)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (valueDescriptor_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}
	var id = table.GetUint64Slot(4, 0)

	return &ValueDescriptor{
		Id:           objectbox.StringIdConvertToEntityProperty(id),
		Created:      fbutils.GetInt64Slot(table, 6),
		Description:  fbutils.GetStringSlot(table, 8),
		Modified:     fbutils.GetInt64Slot(table, 10),
		Origin:       fbutils.GetInt64Slot(table, 12),
		Name:         fbutils.GetStringSlot(table, 14),
		Min:          interfaceJsonToEntityProperty(fbutils.GetByteVectorSlot(table, 16)),
		Max:          interfaceJsonToEntityProperty(fbutils.GetByteVectorSlot(table, 18)),
		DefaultValue: interfaceJsonToEntityProperty(fbutils.GetByteVectorSlot(table, 20)),
		Type:         fbutils.GetStringSlot(table, 22),
		UomLabel:     fbutils.GetStringSlot(table, 24),
		Formatting:   fbutils.GetStringSlot(table, 26),
		Labels:       fbutils.GetStringVectorSlot(table, 28),
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (valueDescriptor_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]ValueDescriptor, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (valueDescriptor_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]ValueDescriptor), *object.(*ValueDescriptor))
}

// Box provides CRUD access to ValueDescriptor objects
type ValueDescriptorBox struct {
	*objectbox.Box
}

// BoxForValueDescriptor opens a box of ValueDescriptor objects
func BoxForValueDescriptor(ob *objectbox.ObjectBox) *ValueDescriptorBox {
	return &ValueDescriptorBox{
		Box: ob.InternalBox(16),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the ValueDescriptor.Id property on the passed object will be assigned the new ID as well.
func (box *ValueDescriptorBox) Put(object *ValueDescriptor) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the ValueDescriptor.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *ValueDescriptorBox) PutAsync(object *ValueDescriptor) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the ValueDescriptor.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the ValueDescriptor.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *ValueDescriptorBox) PutMany(objects []ValueDescriptor) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *ValueDescriptorBox) Get(id uint64) (*ValueDescriptor, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*ValueDescriptor), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is an empty object
func (box *ValueDescriptorBox) GetMany(ids ...uint64) ([]ValueDescriptor, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]ValueDescriptor), nil
}

// GetAll reads all stored objects
func (box *ValueDescriptorBox) GetAll() ([]ValueDescriptor, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]ValueDescriptor), nil
}

// Remove deletes a single object
func (box *ValueDescriptorBox) Remove(object *ValueDescriptor) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *ValueDescriptorBox) RemoveMany(objects ...*ValueDescriptor) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = objectbox.StringIdConvertToDatabaseValue(object.Id)
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the ValueDescriptor_ struct to create conditions.
// Keep the *ValueDescriptorQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *ValueDescriptorBox) Query(conditions ...objectbox.Condition) *ValueDescriptorQuery {
	return &ValueDescriptorQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the ValueDescriptor_ struct to create conditions.
// Keep the *ValueDescriptorQuery if you intend to execute the query multiple times.
func (box *ValueDescriptorBox) QueryOrError(conditions ...objectbox.Condition) (*ValueDescriptorQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &ValueDescriptorQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all ValueDescriptor which Id is either 42 or 47:
// 		box.Query(ValueDescriptor_.Id.In(42, 47)).Find()
type ValueDescriptorQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *ValueDescriptorQuery) Find() ([]ValueDescriptor, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]ValueDescriptor), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *ValueDescriptorQuery) Offset(offset uint64) *ValueDescriptorQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *ValueDescriptorQuery) Limit(limit uint64) *ValueDescriptorQuery {
	query.Query.Limit(limit)
	return query
}
