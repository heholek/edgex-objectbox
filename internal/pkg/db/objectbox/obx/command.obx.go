// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package obx

import (
	"errors"
	"github.com/edgexfoundry/go-mod-core-contracts/models"
	"github.com/google/flatbuffers/go"
	. "github.com/objectbox/edgex-objectbox/internal/pkg/db/objectbox/defs"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type command_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var CommandBinding = command_EntityInfo{
	Entity: objectbox.Entity{
		Id: 2,
	},
	Uid: 3466110984159220104,
}

// Command_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Command_ = struct {
	Created            *objectbox.PropertyInt64
	Modified           *objectbox.PropertyInt64
	Origin             *objectbox.PropertyInt64
	Id                 *objectbox.PropertyUint64
	Name               *objectbox.PropertyString
	Get_Path           *objectbox.PropertyString
	Get_Responses      *objectbox.PropertyByteVector
	Get_URL            *objectbox.PropertyString
	Put_Path           *objectbox.PropertyString
	Put_Responses      *objectbox.PropertyByteVector
	Put_URL            *objectbox.PropertyString
	Put_ParameterNames *objectbox.PropertyStringVector
	DeviceId           *objectbox.RelationToOne
}{
	Created: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &CommandBinding.Entity,
		},
	},
	Modified: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &CommandBinding.Entity,
		},
	},
	Origin: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &CommandBinding.Entity,
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &CommandBinding.Entity,
		},
	},
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     5,
			Entity: &CommandBinding.Entity,
		},
	},
	Get_Path: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     6,
			Entity: &CommandBinding.Entity,
		},
	},
	Get_Responses: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &CommandBinding.Entity,
		},
	},
	Get_URL: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &CommandBinding.Entity,
		},
	},
	Put_Path: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &CommandBinding.Entity,
		},
	},
	Put_Responses: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &CommandBinding.Entity,
		},
	},
	Put_URL: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     11,
			Entity: &CommandBinding.Entity,
		},
	},
	Put_ParameterNames: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     12,
			Entity: &CommandBinding.Entity,
		},
	},
	DeviceId: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     13,
			Entity: &CommandBinding.Entity,
		},
		Target: &DeviceBinding.Entity,
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (command_EntityInfo) GeneratorVersion() int {
	return 4
}

// AddToModel is called by ObjectBox during model build
func (command_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Command", 2, 3466110984159220104)
	model.Property("Created", 6, 1, 8976154384675543155)
	model.Property("Modified", 6, 2, 4173457774608518837)
	model.Property("Origin", 6, 3, 2804731238210135713)
	model.Property("Id", 6, 4, 7187431837387194143)
	model.PropertyFlags(1)
	model.Property("Name", 9, 5, 1838205786009926106)
	model.Property("Get_Path", 9, 6, 4675672987288618325)
	model.Property("Get_Responses", 23, 7, 6760659952611457052)
	model.Property("Get_URL", 9, 8, 3771849917208761361)
	model.Property("Put_Path", 9, 9, 101551801493008702)
	model.Property("Put_Responses", 23, 10, 7143390721286976146)
	model.Property("Put_URL", 9, 11, 5130326444177191018)
	model.Property("Put_ParameterNames", 30, 12, 706434787225063093)
	model.Property("DeviceId", 11, 13, 4054390726219833422)
	model.PropertyFlags(8712)
	model.PropertyRelation("Device", 21, 2079075702818635513)
	model.EntityLastPropertyId(13, 4054390726219833422)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (command_EntityInfo) GetId(object interface{}) (uint64, error) {
	if obj, ok := object.(*Command); ok {
		return objectbox.StringIdConvertToDatabaseValue(obj.Id)
	} else {
		return objectbox.StringIdConvertToDatabaseValue(object.(Command).Id)
	}
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (command_EntityInfo) SetId(object interface{}, id uint64) error {
	if obj, ok := object.(*Command); ok {
		var err error
		obj.Id, err = objectbox.StringIdConvertToEntityProperty(id)
		return err
	} else {
		// NOTE while this can't update, it will at least behave consistently (panic in case of a wrong type)
		_ = object.(Command).Id
		return nil
	}
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (command_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (command_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	var obj *Command
	if objPtr, ok := object.(*Command); ok {
		obj = objPtr
	} else {
		objVal := object.(Command)
		obj = &objVal
	}

	var propGet_Responses []byte
	{
		var err error
		propGet_Responses, err = responsesJsonToDatabaseValue(obj.Get.Action.Responses)
		if err != nil {
			return errors.New("converter responsesJsonToDatabaseValue() failed on Command.Get.Action.Responses: " + err.Error())
		}
	}

	var propPut_Responses []byte
	{
		var err error
		propPut_Responses, err = responsesJsonToDatabaseValue(obj.Put.Action.Responses)
		if err != nil {
			return errors.New("converter responsesJsonToDatabaseValue() failed on Command.Put.Action.Responses: " + err.Error())
		}
	}

	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)
	var offsetGet_Path = fbutils.CreateStringOffset(fbb, obj.Get.Action.Path)
	var offsetGet_Responses = fbutils.CreateByteVectorOffset(fbb, propGet_Responses)
	var offsetGet_URL = fbutils.CreateStringOffset(fbb, obj.Get.Action.URL)
	var offsetPut_Path = fbutils.CreateStringOffset(fbb, obj.Put.Action.Path)
	var offsetPut_Responses = fbutils.CreateByteVectorOffset(fbb, propPut_Responses)
	var offsetPut_URL = fbutils.CreateStringOffset(fbb, obj.Put.Action.URL)
	var offsetPut_ParameterNames = fbutils.CreateStringVectorOffset(fbb, obj.Put.ParameterNames)

	var rIdDeviceId = obj.DeviceId

	// build the FlatBuffers object
	fbb.StartObject(13)
	fbutils.SetInt64Slot(fbb, 0, obj.Timestamps.Created)
	fbutils.SetInt64Slot(fbb, 1, obj.Timestamps.Modified)
	fbutils.SetInt64Slot(fbb, 2, obj.Timestamps.Origin)
	fbutils.SetUint64Slot(fbb, 3, id)
	fbutils.SetUOffsetTSlot(fbb, 4, offsetName)
	fbutils.SetUOffsetTSlot(fbb, 5, offsetGet_Path)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetGet_Responses)
	fbutils.SetUOffsetTSlot(fbb, 7, offsetGet_URL)
	fbutils.SetUOffsetTSlot(fbb, 8, offsetPut_Path)
	fbutils.SetUOffsetTSlot(fbb, 9, offsetPut_Responses)
	fbutils.SetUOffsetTSlot(fbb, 10, offsetPut_URL)
	fbutils.SetUOffsetTSlot(fbb, 11, offsetPut_ParameterNames)
	fbutils.SetUint64Slot(fbb, 12, rIdDeviceId)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (command_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'Command' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	propId, err := objectbox.StringIdConvertToEntityProperty(fbutils.GetUint64Slot(table, 10))
	if err != nil {
		return nil, errors.New("converter objectbox.StringIdConvertToEntityProperty() failed on Command.Id: " + err.Error())
	}

	propGet_Responses, err := responsesJsonToEntityProperty(fbutils.GetByteVectorSlot(table, 16))
	if err != nil {
		return nil, errors.New("converter responsesJsonToEntityProperty() failed on Command.Get.Action.Responses: " + err.Error())
	}

	propPut_Responses, err := responsesJsonToEntityProperty(fbutils.GetByteVectorSlot(table, 22))
	if err != nil {
		return nil, errors.New("converter responsesJsonToEntityProperty() failed on Command.Put.Action.Responses: " + err.Error())
	}

	result := &Command{
		Timestamps: models.Timestamps{
			Created:  fbutils.GetInt64Slot(table, 4),
			Modified: fbutils.GetInt64Slot(table, 6),
			Origin:   fbutils.GetInt64Slot(table, 8),
		},
		Id:       propId,
		Name:     fbutils.GetStringSlot(table, 12),
		DeviceId: fbutils.GetUint64Slot(table, 28),
	}

	result.Get.Action = Action{
		Path:      fbutils.GetStringSlot(table, 14),
		Responses: propGet_Responses,
		URL:       fbutils.GetStringSlot(table, 18),
	}
	result.Put.Action = Action{
		Path:      fbutils.GetStringSlot(table, 20),
		Responses: propPut_Responses,
		URL:       fbutils.GetStringSlot(table, 24),
	}
	result.Put.ParameterNames = fbutils.GetStringVectorSlot(table, 26)

	return result, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (command_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]Command, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (command_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]Command), Command{})
	}
	return append(slice.([]Command), *object.(*Command))
}

// Box provides CRUD access to Command objects
type CommandBox struct {
	*objectbox.Box
}

// BoxForCommand opens a box of Command objects
func BoxForCommand(ob *objectbox.ObjectBox) *CommandBox {
	return &CommandBox{
		Box: ob.InternalBox(2),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Command.Id property on the passed object will be assigned the new ID as well.
func (box *CommandBox) Put(object *Command) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Command.Id property on the passed object will be assigned the new ID as well.
func (box *CommandBox) Insert(object *Command) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *CommandBox) Update(object *Command) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *CommandBox) PutAsync(object *Command) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Command.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Command.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *CommandBox) PutMany(objects []Command) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *CommandBox) Get(id uint64) (*Command, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Command), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is an empty object
func (box *CommandBox) GetMany(ids ...uint64) ([]Command, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]Command), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *CommandBox) GetManyExisting(ids ...uint64) ([]Command, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]Command), nil
}

// GetAll reads all stored objects
func (box *CommandBox) GetAll() ([]Command, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]Command), nil
}

// Remove deletes a single object
func (box *CommandBox) Remove(object *Command) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *CommandBox) RemoveMany(objects ...*Command) (uint64, error) {
	var ids = make([]uint64, len(objects))
	var err error
	for k, object := range objects {
		ids[k], err = objectbox.StringIdConvertToDatabaseValue(object.Id)
		if err != nil {
			return 0, errors.New("converter objectbox.StringIdConvertToDatabaseValue() failed on Command.Id: " + err.Error())
		}
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the Command_ struct to create conditions.
// Keep the *CommandQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *CommandBox) Query(conditions ...objectbox.Condition) *CommandQuery {
	return &CommandQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Command_ struct to create conditions.
// Keep the *CommandQuery if you intend to execute the query multiple times.
func (box *CommandBox) QueryOrError(conditions ...objectbox.Condition) (*CommandQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &CommandQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See CommandAsyncBox for more information.
func (box *CommandBox) Async() *CommandAsyncBox {
	return &CommandAsyncBox{AsyncBox: box.Box.Async()}
}

// CommandAsyncBox provides asynchronous operations on Command objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type CommandAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForCommand creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use CommandBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForCommand(ob *objectbox.ObjectBox, timeoutMs uint64) *CommandAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 2, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 2: %s" + err.Error())
	}
	return &CommandAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *CommandAsyncBox) Put(object *Command) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *CommandAsyncBox) Insert(object *Command) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *CommandAsyncBox) Update(object *Command) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *CommandAsyncBox) Remove(object *Command) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all Command which Id is either 42 or 47:
// 		box.Query(Command_.Id.In(42, 47)).Find()
type CommandQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *CommandQuery) Find() ([]Command, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]Command), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *CommandQuery) Offset(offset uint64) *CommandQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *CommandQuery) Limit(limit uint64) *CommandQuery {
	query.Query.Limit(limit)
	return query
}
